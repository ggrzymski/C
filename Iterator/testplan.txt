Input: compareInts sorted-list

SLCreate(sl)

SLInsert(sl,1) 
SLInsert(sl,1)
SLInsert(sl,2)
SLInsert(sl,2)
SLInser(sl,3)
SLInsert(sl,3)
SLInsert(sl,4)
SLInsert(sl,5)
SLInsert(sl,6)

SLCreateIterator(sl)
SLNextItem(iter) traversal
SLDestroyIterator(iter)
SLDestroy(sl)

Output:
6
5
4
3
2
1

Input: compareInts sorted-list

SLCreate(sl)
SLInsert(sl,1) 
SLInsert(sl,2)
SLInsert(sl,3)
SLInsert(sl,4)
SLInser(sl,5)
SLInsert(sl,6)
SLInsert(sl,7)

SLRemove(sl,4)
SLRemove(sl,5)

SLCreateIterator(sl)
SLNextItem(iter) traversal
SLDestroyIterator(iter)
SLDestroy(sl)

Output:

7
6
3
2
1

Input: compareInts, checks for proper removal of head node

SortedListPtr sl=SLCreate(compareInts);
SLInsert(sl,(void*)num_1);
SLInsert(sl,(void*)num_2);
SLRemove(sl,(void*)num_2);
SLCreateIterator(sl);
SLNextItem(iter) traversal
SLDestroyIterator(iterate);
SLDestroy(sl);	

Output:
1

Input: compareInts, checks for proper removal of tail node

SLInsert(sl,(void*)num_1);
SLInsert(sl,(void*)num_2);
SLRemove(sl,(void*)num_1);
SortedListIteratorPtr iterate=SLCreateIterator(sl);
SLNextItem(iter) traversal
SLDestroyIterator(iterate);
SLDestroy(sl);

Output: 
2

Input: compareInts, checks for proper deletion and re-insertion

SLInsert(sl,(void*)num_1);
SLInsert(sl,(void*)num_2);
SLInsert(sl,(void*)num_3);
SLInsert(sl,(void*)num_4);
SLInsert(sl,(void*)num_5);
			
SLRemove(sl,(void*)num_3);
SLRemove(sl,(void*)num_4);
SLRemove(sl,(void*)num_5);

SLInsert(sl,(void*)num_3);
SLInsert(sl,(void*)num_4);
SLInsert(sl,(void*)num_5);

SortedListIteratorPtr iterate=SLCreateIterator(sl);
SLNextItem(iter) traversal
SLDestroyIterator(iterate);
SLDestroy(sl);

Output:

5
4
3
2
1

Input: CompareInts, SLNextItem x 2, SLRemove, SLNextItem x 3

SLInsert(sl,(void*)num_1);
SLInsert(sl,(void*)num_2);
SLInsert(sl,(void*)num_3);
SLInsert(sl,(void*)num_4);
SLInsert(sl,(void*)num_5);
SortedListIteratorPtr iterate=SLCreateIterator(sl);
print_out=SLNextItem(iterate);
print_out=SLNextItem(iterate);
SLRemove(sl,(void*)num_4);
SLNextItem(iter) traversal
SLDestroyIterator(iterate);
SLDestroy(sl);

Output: 
3
2
1

Input: CompareInts, 1 x SLRemove, 3 x SLNextItem

SLInsert(sl,(void*)num_1);
SLInsert(sl,(void*)num_2);
SLInsert(sl,(void*)num_3);
SLInsert(sl,(void*)num_4);
SLInsert(sl,(void*)num_5);
SortedListIteratorPtr iterate=SLCreateIterator(sl);

print_out=SLNextItem(iterate);
print_out=SLNextItem(iterate);
SLRemove(sl,(void*)num_2);
SLNextItem(iter) traversal
SLDestroyIterator(iterate);
SLDestroy(sl);

Output:
3
1
NULL

Input: CompareInts, 1 x SLInsert, 4 x SLNextItem

SLInsert(sl,(void*)num_1);
SLInsert(sl,(void*)num_2);
SLInsert(sl,(void*)num_3);
SLInsert(sl,(void*)num_4);
SLInsert(sl,(void*)num_5);

print_out=SLNextItem(iterate);
print_out=SLNextItem(iterate);
SLInsert(sl,num_0);

SLNextItem(iter) traversal
SLDestroyIterator(iterate);
SLDestroy(sl);

Output:
3
2
1
0

Input: CompareInts, SLRemoving the Iterator Pointer

SLInsert(sl,(void*)num_1);
SLInsert(sl,(void*)num_2);
SLInsert(sl,(void*)num_3);
SLInsert(sl,(void*)num_4);
SLInsert(sl,(void*)num_5);
SLCreateIterator(sl);
print_out=SLNextItem(iterate);
print_out=SLNextItem(iterate);
SLRemove(sl,num_3);
SLNextItem(iter) traversal
SLDestroyIterator(iterate);
SLDestroy(sl);

Output: 
2
1

Input: CompareInts, SLInserting in front of iterator

Output:
SLInsert(sl,(void*)num_1);
SLInsert(sl,(void*)num_2);
SLInsert(sl,(void*)num_3);
SLInsert(sl,(void*)num_4);
SLInsert(sl,(void*)num_5);
SortedListIteratorPtr iterate=SLCreateIterator(sl);
print_out=SLNextItem(iterate);
printf("%d\n",*(int*)print_out);
SLInsert(sl,num_6);
SLNextItem(iter) traversal
SLDestroyIterator(iterate);
SLDestroy(sl);

Output:
5
4
3
2
1

Input: CompareInts, SLRemove during iteration

SLInsert(sl,(void*)num_1);
SLInsert(sl,(void*)num_2);
SLInsert(sl,(void*)num_3);
SLInsert(sl,(void*)num_4);
SLInsert(sl,(void*)num_5);
SortedListIteratorPtr iterate=SLCreateIterator(sl);
SLRemove(sl,num_2);
SLNextItem(iter) traversal
SLDestroyIterator(iterate);
SLDestroy(sl);

Output:

3
1

Input: CompareInts, Destroying an Iterator, and Creating a New One on the list with a new element

SLInsert(sl,(void*)num_1);
SLInsert(sl,(void*)num_2);
SLInsert(sl,(void*)num_3);
SLInsert(sl,(void*)num_4);
SLInsert(sl,(void*)num_5);
SortedListIteratorPtr iterate=SLCreateIterator(sl);
print_out=SLNextItem(iterate);
print_out=SLNextItem(iterate);
SLDestroyIterator(iterate);
SLInsert(sl,num_6);
iterate=SLCreateIterator(sl);
SLNextItem(iter) traversal
SLDestroyIterator(iterate);
SLDestroy(sl);

Output:

6
5
4
3
2
1
Input: CompareInts, SLRemoving the Head Node pointed by the Iterator

SLInsert(sl,(void*)num_1);
SLInsert(sl,(void*)num_2);
SLInsert(sl,(void*)num_3);
SLInsert(sl,(void*)num_4);
SLInsert(sl,(void*)num_5);
			
SortedListIteratorPtr iterate=SLCreateIterator(sl);
void *print_out;
			
SLRemove(sl,num_5);
print_out=SLNextItem(iterate);
printf("%d\n", *(int*)print_out);
print_out=SLNextItem(iterate);
printf("%d\n", *(int*)print_out);
print_out=SLNextItem(iterate);
printf("%d\n", *(int*)print_out);
print_out=SLNextItem(iterate);
printf("%d\n", *(int*)print_out);
SLDestroyIterator(iterate);
SLDestroy(sl);

Output:
4
3
2
1

Input: printf("CompareStrings, tests for two iterators one one list.\n");

SortedListPtr sl=SLCreate(compareStrings,destroyBasicTypeNoAlloc);
			
char a_orig[2]="a";
char b_orig[2]="b";
char c_orig[2]="c";
char d_orig[2]="d";
SLInsert(sl,(void*)a_orig);
SLInsert(sl,(void*)b_orig);
SLInsert(sl,(void*)c_orig);
SLInsert(sl,(void*)d_orig);
SortedListIteratorPtr iterate=SLCreateIterator(sl);
SortedListIteratorPtr iterate2= SLCreateIterator(sl);
void *print_out;
print_out=SLNextItem(iterate); /* point to c */ 
print_out=SLNextItem(iterate); /* point to b */
print_out=SLNextItem(iterate2); /* point to c */
			
SLRemove(sl,b_orig);
SLRemove(sl,c_orig);
			
print_out= SLNextItem(iterate);
printf("%s\n",(char*)print_out);
			
print_out=SLNextItem(iterate2);
printf("%s\n",(char*)print_out);

SLDestroyIterator(iterate);
SLDestroyIterator(iterate2);
			
SLDestroy(sl);

Output:
a
a
